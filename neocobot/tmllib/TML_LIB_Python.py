# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
from sys import version_info

from neocobot.error.error import ProgramError
from neocobot.error.error_code import ErrorCodes

if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _TML_LIB_Python.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        _mod = None
        try:
            import importlib
            _mod = importlib.import_module('neocobot.tmllib._TML_LIB_Python')
        except Exception as e:
            raise ProgramError(ErrorCodes.e000009, 'File \'_TML_LIB_Python\' is missed')
        return _mod
    _TML_LIB_Python = swig_import_helper()
    del swig_import_helper
else:
    import _TML_LIB_Python
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def TS_ReadStatus(*args):
  return _TML_LIB_Python.TS_ReadStatus(*args)
TS_ReadStatus = _TML_LIB_Python.TS_ReadStatus

def TS_GetVariableAddress(*args):
  return _TML_LIB_Python.TS_GetVariableAddress(*args)
TS_GetVariableAddress = _TML_LIB_Python.TS_GetVariableAddress

def TS_GetIntVariable(*args):
  return _TML_LIB_Python.TS_GetIntVariable(*args)
TS_GetIntVariable = _TML_LIB_Python.TS_GetIntVariable

def TS_GetLongVariable(*args):
  return _TML_LIB_Python.TS_GetLongVariable(*args)
TS_GetLongVariable = _TML_LIB_Python.TS_GetLongVariable

def TS_GetFixedVariable(*args):
  return _TML_LIB_Python.TS_GetFixedVariable(*args)
TS_GetFixedVariable = _TML_LIB_Python.TS_GetFixedVariable

def TS_GetBuffer(*args):
  return _TML_LIB_Python.TS_GetBuffer(*args)
TS_GetBuffer = _TML_LIB_Python.TS_GetBuffer

def TS_CamDownload(*args):
  return _TML_LIB_Python.TS_CamDownload(*args)
TS_CamDownload = _TML_LIB_Python.TS_CamDownload

def TS_CheckEvent():
  return _TML_LIB_Python.TS_CheckEvent()
TS_CheckEvent = _TML_LIB_Python.TS_CheckEvent

def TS_GetInput(*args):
  return _TML_LIB_Python.TS_GetInput(*args)
TS_GetInput = _TML_LIB_Python.TS_GetInput

def TS_GetHomeInput():
  return _TML_LIB_Python.TS_GetHomeInput()
TS_GetHomeInput = _TML_LIB_Python.TS_GetHomeInput

def TS_GetMultipleInputs(*args):
  return _TML_LIB_Python.TS_GetMultipleInputs(*args)
TS_GetMultipleInputs = _TML_LIB_Python.TS_GetMultipleInputs

def TS_OnlineChecksum(*args):
  return _TML_LIB_Python.TS_OnlineChecksum(*args)
TS_OnlineChecksum = _TML_LIB_Python.TS_OnlineChecksum

def TS_DownloadProgram(*args):
  return _TML_LIB_Python.TS_DownloadProgram(*args)
TS_DownloadProgram = _TML_LIB_Python.TS_DownloadProgram

def TS_CheckLoggerStatus(*args):
  return _TML_LIB_Python.TS_CheckLoggerStatus(*args)
TS_CheckLoggerStatus = _TML_LIB_Python.TS_CheckLoggerStatus

def TS_UploadLoggerResults(*args):
  return _TML_LIB_Python.TS_UploadLoggerResults(*args)
TS_UploadLoggerResults = _TML_LIB_Python.TS_UploadLoggerResults
FALSE = _TML_LIB_Python.FALSE
TRUE = _TML_LIB_Python.TRUE
PROTOCOL_TMLCAN = _TML_LIB_Python.PROTOCOL_TMLCAN
PROTOCOL_TECHNOCAN = _TML_LIB_Python.PROTOCOL_TECHNOCAN
PR0TOCOL_MASK = _TML_LIB_Python.PR0TOCOL_MASK
CHANNEL_RS232 = _TML_LIB_Python.CHANNEL_RS232
CHANNEL_RS485 = _TML_LIB_Python.CHANNEL_RS485
CHANNEL_IXXAT_CAN = _TML_LIB_Python.CHANNEL_IXXAT_CAN
CHANNEL_SYS_TEC_USBCAN = _TML_LIB_Python.CHANNEL_SYS_TEC_USBCAN
CHANNEL_PEAK_SYS_PCAN_PCI = _TML_LIB_Python.CHANNEL_PEAK_SYS_PCAN_PCI
CHANNEL_ESD_CAN = _TML_LIB_Python.CHANNEL_ESD_CAN
CHANNEL_PEAK_SYS_PCAN_ISA = _TML_LIB_Python.CHANNEL_PEAK_SYS_PCAN_ISA
CHANNEL_PEAK_SYS_PCAN_PC104 = _TML_LIB_Python.CHANNEL_PEAK_SYS_PCAN_PC104
CHANNEL_PEAK_SYS_PCAN_USB = _TML_LIB_Python.CHANNEL_PEAK_SYS_PCAN_USB
CHANNEL_PEAK_SYS_PCAN_DONGLE = _TML_LIB_Python.CHANNEL_PEAK_SYS_PCAN_DONGLE
CHANNEL_LAWICEL_USBCAN = _TML_LIB_Python.CHANNEL_LAWICEL_USBCAN
CHANNEL_VIRTUAL_SERIAL = _TML_LIB_Python.CHANNEL_VIRTUAL_SERIAL
CHANNEL_XPORT_IP = _TML_LIB_Python.CHANNEL_XPORT_IP
HOST_ID = _TML_LIB_Python.HOST_ID
LOGGER_SLOW = _TML_LIB_Python.LOGGER_SLOW
LOGGER_FAST = _TML_LIB_Python.LOGGER_FAST
UPDATE_NONE = _TML_LIB_Python.UPDATE_NONE
UPDATE_ON_EVENT = _TML_LIB_Python.UPDATE_ON_EVENT
UPDATE_IMMEDIATE = _TML_LIB_Python.UPDATE_IMMEDIATE
REFERENCE_POSITION = _TML_LIB_Python.REFERENCE_POSITION
REFERENCE_SPEED = _TML_LIB_Python.REFERENCE_SPEED
REFERENCE_TORQUE = _TML_LIB_Python.REFERENCE_TORQUE
REFERENCE_VOLTAGE = _TML_LIB_Python.REFERENCE_VOLTAGE
SUPERPOS_DISABLE = _TML_LIB_Python.SUPERPOS_DISABLE
SUPERPOS_NONE = _TML_LIB_Python.SUPERPOS_NONE
SUPERPOS_ENABLE = _TML_LIB_Python.SUPERPOS_ENABLE
ABSOLUTE_POSITION = _TML_LIB_Python.ABSOLUTE_POSITION
RELATIVE_POSITION = _TML_LIB_Python.RELATIVE_POSITION
SLAVE_NONE = _TML_LIB_Python.SLAVE_NONE
SLAVE_COMMUNICATION_CHANNEL = _TML_LIB_Python.SLAVE_COMMUNICATION_CHANNEL
SLAVE_2ND_ENCODER = _TML_LIB_Python.SLAVE_2ND_ENCODER
FROM_MEASURE = _TML_LIB_Python.FROM_MEASURE
FROM_REFERENCE = _TML_LIB_Python.FROM_REFERENCE
S_CURVE_SPEED_PROFILE = _TML_LIB_Python.S_CURVE_SPEED_PROFILE
TRAPEZOIDAL_SPEED_PROFILE = _TML_LIB_Python.TRAPEZOIDAL_SPEED_PROFILE
IO_HIGH = _TML_LIB_Python.IO_HIGH
IO_LOW = _TML_LIB_Python.IO_LOW
TRANSITION_HIGH_TO_LOW = _TML_LIB_Python.TRANSITION_HIGH_TO_LOW
TRANSITION_DISABLE = _TML_LIB_Python.TRANSITION_DISABLE
TRANSITION_LOW_TO_HIGH = _TML_LIB_Python.TRANSITION_LOW_TO_HIGH
INDEX_1 = _TML_LIB_Python.INDEX_1
INDEX_2 = _TML_LIB_Python.INDEX_2
LSW_NEGATIVE = _TML_LIB_Python.LSW_NEGATIVE
LSW_POSITIVE = _TML_LIB_Python.LSW_POSITIVE
POWER_ON = _TML_LIB_Python.POWER_ON
POWER_OFF = _TML_LIB_Python.POWER_OFF
INPUT_0 = _TML_LIB_Python.INPUT_0
INPUT_1 = _TML_LIB_Python.INPUT_1
INPUT_2 = _TML_LIB_Python.INPUT_2
INPUT_3 = _TML_LIB_Python.INPUT_3
INPUT_4 = _TML_LIB_Python.INPUT_4
INPUT_5 = _TML_LIB_Python.INPUT_5
INPUT_6 = _TML_LIB_Python.INPUT_6
INPUT_7 = _TML_LIB_Python.INPUT_7
INPUT_8 = _TML_LIB_Python.INPUT_8
INPUT_9 = _TML_LIB_Python.INPUT_9
INPUT_10 = _TML_LIB_Python.INPUT_10
INPUT_11 = _TML_LIB_Python.INPUT_11
INPUT_12 = _TML_LIB_Python.INPUT_12
INPUT_13 = _TML_LIB_Python.INPUT_13
INPUT_14 = _TML_LIB_Python.INPUT_14
INPUT_15 = _TML_LIB_Python.INPUT_15
INPUT_16 = _TML_LIB_Python.INPUT_16
INPUT_17 = _TML_LIB_Python.INPUT_17
INPUT_18 = _TML_LIB_Python.INPUT_18
INPUT_19 = _TML_LIB_Python.INPUT_19
INPUT_20 = _TML_LIB_Python.INPUT_20
INPUT_21 = _TML_LIB_Python.INPUT_21
INPUT_22 = _TML_LIB_Python.INPUT_22
INPUT_23 = _TML_LIB_Python.INPUT_23
INPUT_24 = _TML_LIB_Python.INPUT_24
INPUT_25 = _TML_LIB_Python.INPUT_25
INPUT_26 = _TML_LIB_Python.INPUT_26
INPUT_27 = _TML_LIB_Python.INPUT_27
INPUT_28 = _TML_LIB_Python.INPUT_28
INPUT_29 = _TML_LIB_Python.INPUT_29
INPUT_30 = _TML_LIB_Python.INPUT_30
INPUT_31 = _TML_LIB_Python.INPUT_31
INPUT_32 = _TML_LIB_Python.INPUT_32
INPUT_33 = _TML_LIB_Python.INPUT_33
INPUT_34 = _TML_LIB_Python.INPUT_34
INPUT_35 = _TML_LIB_Python.INPUT_35
INPUT_36 = _TML_LIB_Python.INPUT_36
INPUT_37 = _TML_LIB_Python.INPUT_37
INPUT_38 = _TML_LIB_Python.INPUT_38
INPUT_39 = _TML_LIB_Python.INPUT_39
OUTPUT_0 = _TML_LIB_Python.OUTPUT_0
OUTPUT_1 = _TML_LIB_Python.OUTPUT_1
OUTPUT_2 = _TML_LIB_Python.OUTPUT_2
OUTPUT_3 = _TML_LIB_Python.OUTPUT_3
OUTPUT_4 = _TML_LIB_Python.OUTPUT_4
OUTPUT_5 = _TML_LIB_Python.OUTPUT_5
OUTPUT_6 = _TML_LIB_Python.OUTPUT_6
OUTPUT_7 = _TML_LIB_Python.OUTPUT_7
OUTPUT_8 = _TML_LIB_Python.OUTPUT_8
OUTPUT_9 = _TML_LIB_Python.OUTPUT_9
OUTPUT_10 = _TML_LIB_Python.OUTPUT_10
OUTPUT_11 = _TML_LIB_Python.OUTPUT_11
OUTPUT_12 = _TML_LIB_Python.OUTPUT_12
OUTPUT_13 = _TML_LIB_Python.OUTPUT_13
OUTPUT_14 = _TML_LIB_Python.OUTPUT_14
OUTPUT_15 = _TML_LIB_Python.OUTPUT_15
OUTPUT_16 = _TML_LIB_Python.OUTPUT_16
OUTPUT_17 = _TML_LIB_Python.OUTPUT_17
OUTPUT_18 = _TML_LIB_Python.OUTPUT_18
OUTPUT_19 = _TML_LIB_Python.OUTPUT_19
OUTPUT_20 = _TML_LIB_Python.OUTPUT_20
OUTPUT_21 = _TML_LIB_Python.OUTPUT_21
OUTPUT_22 = _TML_LIB_Python.OUTPUT_22
OUTPUT_23 = _TML_LIB_Python.OUTPUT_23
OUTPUT_24 = _TML_LIB_Python.OUTPUT_24
OUTPUT_25 = _TML_LIB_Python.OUTPUT_25
OUTPUT_26 = _TML_LIB_Python.OUTPUT_26
OUTPUT_27 = _TML_LIB_Python.OUTPUT_27
OUTPUT_28 = _TML_LIB_Python.OUTPUT_28
OUTPUT_29 = _TML_LIB_Python.OUTPUT_29
OUTPUT_30 = _TML_LIB_Python.OUTPUT_30
OUTPUT_31 = _TML_LIB_Python.OUTPUT_31
OUTPUT_32 = _TML_LIB_Python.OUTPUT_32
OUTPUT_33 = _TML_LIB_Python.OUTPUT_33
OUTPUT_34 = _TML_LIB_Python.OUTPUT_34
OUTPUT_35 = _TML_LIB_Python.OUTPUT_35
OUTPUT_36 = _TML_LIB_Python.OUTPUT_36
OUTPUT_37 = _TML_LIB_Python.OUTPUT_37
OUTPUT_38 = _TML_LIB_Python.OUTPUT_38
OUTPUT_39 = _TML_LIB_Python.OUTPUT_39
REG_MCR = _TML_LIB_Python.REG_MCR
REG_MSR = _TML_LIB_Python.REG_MSR
REG_ISR = _TML_LIB_Python.REG_ISR
REG_SRL = _TML_LIB_Python.REG_SRL
REG_SRH = _TML_LIB_Python.REG_SRH
REG_MER = _TML_LIB_Python.REG_MER
GROUP_0 = _TML_LIB_Python.GROUP_0
GROUP_1 = _TML_LIB_Python.GROUP_1
GROUP_2 = _TML_LIB_Python.GROUP_2
GROUP_3 = _TML_LIB_Python.GROUP_3
GROUP_4 = _TML_LIB_Python.GROUP_4
GROUP_5 = _TML_LIB_Python.GROUP_5
GROUP_6 = _TML_LIB_Python.GROUP_6
GROUP_7 = _TML_LIB_Python.GROUP_7
GROUP_8 = _TML_LIB_Python.GROUP_8
FULL_RANGE = _TML_LIB_Python.FULL_RANGE
NO_VARIATION = _TML_LIB_Python.NO_VARIATION

def TS_GetLastErrorText():
  return _TML_LIB_Python.TS_GetLastErrorText()
TS_GetLastErrorText = _TML_LIB_Python.TS_GetLastErrorText

def TS_LoadSetup(*args):
  return _TML_LIB_Python.TS_LoadSetup(*args)
TS_LoadSetup = _TML_LIB_Python.TS_LoadSetup

def TS_OpenChannel(*args):
  return _TML_LIB_Python.TS_OpenChannel(*args)
TS_OpenChannel = _TML_LIB_Python.TS_OpenChannel

def TS_SelectChannel(*args):
  return _TML_LIB_Python.TS_SelectChannel(*args)
TS_SelectChannel = _TML_LIB_Python.TS_SelectChannel

def TS_CloseChannel(*args):
  return _TML_LIB_Python.TS_CloseChannel(*args)
TS_CloseChannel = _TML_LIB_Python.TS_CloseChannel

def TS_SetupAxis(*args):
  return _TML_LIB_Python.TS_SetupAxis(*args)
TS_SetupAxis = _TML_LIB_Python.TS_SetupAxis

def TS_SelectAxis(*args):
  return _TML_LIB_Python.TS_SelectAxis(*args)
TS_SelectAxis = _TML_LIB_Python.TS_SelectAxis

def TS_SetupGroup(*args):
  return _TML_LIB_Python.TS_SetupGroup(*args)
TS_SetupGroup = _TML_LIB_Python.TS_SetupGroup

def TS_SelectGroup(*args):
  return _TML_LIB_Python.TS_SelectGroup(*args)
TS_SelectGroup = _TML_LIB_Python.TS_SelectGroup

def TS_SetupBroadcast(*args):
  return _TML_LIB_Python.TS_SetupBroadcast(*args)
TS_SetupBroadcast = _TML_LIB_Python.TS_SetupBroadcast

def TS_SelectBroadcast():
  return _TML_LIB_Python.TS_SelectBroadcast()
TS_SelectBroadcast = _TML_LIB_Python.TS_SelectBroadcast

def TS_Reset():
  return _TML_LIB_Python.TS_Reset()
TS_Reset = _TML_LIB_Python.TS_Reset

def TS_ResetFault():
  return _TML_LIB_Python.TS_ResetFault()
TS_ResetFault = _TML_LIB_Python.TS_ResetFault

def TS_Power(*args):
  return _TML_LIB_Python.TS_Power(*args)
TS_Power = _TML_LIB_Python.TS_Power

def TS_Save():
  return _TML_LIB_Python.TS_Save()
TS_Save = _TML_LIB_Python.TS_Save

def TS_UpdateImmediate():
  return _TML_LIB_Python.TS_UpdateImmediate()
TS_UpdateImmediate = _TML_LIB_Python.TS_UpdateImmediate

def TS_UpdateOnEvent():
  return _TML_LIB_Python.TS_UpdateOnEvent()
TS_UpdateOnEvent = _TML_LIB_Python.TS_UpdateOnEvent

def TS_SetPosition(*args):
  return _TML_LIB_Python.TS_SetPosition(*args)
TS_SetPosition = _TML_LIB_Python.TS_SetPosition

def TS_SetCurrent(*args):
  return _TML_LIB_Python.TS_SetCurrent(*args)
TS_SetCurrent = _TML_LIB_Python.TS_SetCurrent

def TS_SetTargetPositionToActual():
  return _TML_LIB_Python.TS_SetTargetPositionToActual()
TS_SetTargetPositionToActual = _TML_LIB_Python.TS_SetTargetPositionToActual

def TS_SetIntVariable(*args):
  return _TML_LIB_Python.TS_SetIntVariable(*args)
TS_SetIntVariable = _TML_LIB_Python.TS_SetIntVariable

def TS_SetLongVariable(*args):
  return _TML_LIB_Python.TS_SetLongVariable(*args)
TS_SetLongVariable = _TML_LIB_Python.TS_SetLongVariable

def TS_SetFixedVariable(*args):
  return _TML_LIB_Python.TS_SetFixedVariable(*args)
TS_SetFixedVariable = _TML_LIB_Python.TS_SetFixedVariable

def TS_SetBuffer(*args):
  return _TML_LIB_Python.TS_SetBuffer(*args)
TS_SetBuffer = _TML_LIB_Python.TS_SetBuffer

def TS_MoveAbsolute(*args):
  return _TML_LIB_Python.TS_MoveAbsolute(*args)
TS_MoveAbsolute = _TML_LIB_Python.TS_MoveAbsolute

def TS_MoveRelative(*args):
  return _TML_LIB_Python.TS_MoveRelative(*args)
TS_MoveRelative = _TML_LIB_Python.TS_MoveRelative

def TS_MoveVelocity(*args):
  return _TML_LIB_Python.TS_MoveVelocity(*args)
TS_MoveVelocity = _TML_LIB_Python.TS_MoveVelocity

def TS_SetAnalogueMoveExternal(*args):
  return _TML_LIB_Python.TS_SetAnalogueMoveExternal(*args)
TS_SetAnalogueMoveExternal = _TML_LIB_Python.TS_SetAnalogueMoveExternal

def TS_SetDigitalMoveExternal(SetGearRatio=0, Denominator=1, Numerator=1, LimitVariation=0, MoveMoment=1):
  return _TML_LIB_Python.TS_SetDigitalMoveExternal(SetGearRatio, Denominator, Numerator, LimitVariation, MoveMoment)
TS_SetDigitalMoveExternal = _TML_LIB_Python.TS_SetDigitalMoveExternal

def TS_SetOnlineMoveExternal(*args):
  return _TML_LIB_Python.TS_SetOnlineMoveExternal(*args)
TS_SetOnlineMoveExternal = _TML_LIB_Python.TS_SetOnlineMoveExternal

def TS_VoltageTestMode(*args):
  return _TML_LIB_Python.TS_VoltageTestMode(*args)
TS_VoltageTestMode = _TML_LIB_Python.TS_VoltageTestMode

def TS_TorqueTestMode(*args):
  return _TML_LIB_Python.TS_TorqueTestMode(*args)
TS_TorqueTestMode = _TML_LIB_Python.TS_TorqueTestMode

def TS_SetGearingMaster(*args):
  return _TML_LIB_Python.TS_SetGearingMaster(*args)
TS_SetGearingMaster = _TML_LIB_Python.TS_SetGearingMaster

def TS_SetGearingSlave(*args):
  return _TML_LIB_Python.TS_SetGearingSlave(*args)
TS_SetGearingSlave = _TML_LIB_Python.TS_SetGearingSlave

def TS_MotionSuperposition(*args):
  return _TML_LIB_Python.TS_MotionSuperposition(*args)
TS_MotionSuperposition = _TML_LIB_Python.TS_MotionSuperposition

def TS_SetCammingMaster(*args):
  return _TML_LIB_Python.TS_SetCammingMaster(*args)
TS_SetCammingMaster = _TML_LIB_Python.TS_SetCammingMaster

def TS_CamInitialization(*args):
  return _TML_LIB_Python.TS_CamInitialization(*args)
TS_CamInitialization = _TML_LIB_Python.TS_CamInitialization

def TS_SetCammingSlaveRelative(*args):
  return _TML_LIB_Python.TS_SetCammingSlaveRelative(*args)
TS_SetCammingSlaveRelative = _TML_LIB_Python.TS_SetCammingSlaveRelative

def TS_SetCammingSlaveAbsolute(*args):
  return _TML_LIB_Python.TS_SetCammingSlaveAbsolute(*args)
TS_SetCammingSlaveAbsolute = _TML_LIB_Python.TS_SetCammingSlaveAbsolute

def TS_SetMasterResolution(*args):
  return _TML_LIB_Python.TS_SetMasterResolution(*args)
TS_SetMasterResolution = _TML_LIB_Python.TS_SetMasterResolution

def TS_SendSynchronization(*args):
  return _TML_LIB_Python.TS_SendSynchronization(*args)
TS_SendSynchronization = _TML_LIB_Python.TS_SendSynchronization

def TS_Stop():
  return _TML_LIB_Python.TS_Stop()
TS_Stop = _TML_LIB_Python.TS_Stop

def TS_QuickStopDecelerationRate(*args):
  return _TML_LIB_Python.TS_QuickStopDecelerationRate(*args)
TS_QuickStopDecelerationRate = _TML_LIB_Python.TS_QuickStopDecelerationRate

def TS_SendPVTPoint(*args):
  return _TML_LIB_Python.TS_SendPVTPoint(*args)
TS_SendPVTPoint = _TML_LIB_Python.TS_SendPVTPoint

def TS_SendPVTFirstPoint(*args):
  return _TML_LIB_Python.TS_SendPVTFirstPoint(*args)
TS_SendPVTFirstPoint = _TML_LIB_Python.TS_SendPVTFirstPoint

def TS_PVTSetup(*args):
  return _TML_LIB_Python.TS_PVTSetup(*args)
TS_PVTSetup = _TML_LIB_Python.TS_PVTSetup

def TS_SendPTPoint(*args):
  return _TML_LIB_Python.TS_SendPTPoint(*args)
TS_SendPTPoint = _TML_LIB_Python.TS_SendPTPoint

def TS_SendPTFirstPoint(*args):
  return _TML_LIB_Python.TS_SendPTFirstPoint(*args)
TS_SendPTFirstPoint = _TML_LIB_Python.TS_SendPTFirstPoint

def TS_PTSetup(*args):
  return _TML_LIB_Python.TS_PTSetup(*args)
TS_PTSetup = _TML_LIB_Python.TS_PTSetup

def TS_MoveSCurveRelative(*args):
  return _TML_LIB_Python.TS_MoveSCurveRelative(*args)
TS_MoveSCurveRelative = _TML_LIB_Python.TS_MoveSCurveRelative

def TS_MoveSCurveAbsolute(*args):
  return _TML_LIB_Python.TS_MoveSCurveAbsolute(*args)
TS_MoveSCurveAbsolute = _TML_LIB_Python.TS_MoveSCurveAbsolute

def TS_SetEventOnMotionComplete(*args):
  return _TML_LIB_Python.TS_SetEventOnMotionComplete(*args)
TS_SetEventOnMotionComplete = _TML_LIB_Python.TS_SetEventOnMotionComplete

def TS_SetEventOnMotorPosition(*args):
  return _TML_LIB_Python.TS_SetEventOnMotorPosition(*args)
TS_SetEventOnMotorPosition = _TML_LIB_Python.TS_SetEventOnMotorPosition

def TS_SetEventOnLoadPosition(*args):
  return _TML_LIB_Python.TS_SetEventOnLoadPosition(*args)
TS_SetEventOnLoadPosition = _TML_LIB_Python.TS_SetEventOnLoadPosition

def TS_SetEventOnMotorSpeed(*args):
  return _TML_LIB_Python.TS_SetEventOnMotorSpeed(*args)
TS_SetEventOnMotorSpeed = _TML_LIB_Python.TS_SetEventOnMotorSpeed

def TS_SetEventOnLoadSpeed(*args):
  return _TML_LIB_Python.TS_SetEventOnLoadSpeed(*args)
TS_SetEventOnLoadSpeed = _TML_LIB_Python.TS_SetEventOnLoadSpeed

def TS_SetEventOnTime(*args):
  return _TML_LIB_Python.TS_SetEventOnTime(*args)
TS_SetEventOnTime = _TML_LIB_Python.TS_SetEventOnTime

def TS_SetEventOnPositionRef(*args):
  return _TML_LIB_Python.TS_SetEventOnPositionRef(*args)
TS_SetEventOnPositionRef = _TML_LIB_Python.TS_SetEventOnPositionRef

def TS_SetEventOnSpeedRef(*args):
  return _TML_LIB_Python.TS_SetEventOnSpeedRef(*args)
TS_SetEventOnSpeedRef = _TML_LIB_Python.TS_SetEventOnSpeedRef

def TS_SetEventOnTorqueRef(*args):
  return _TML_LIB_Python.TS_SetEventOnTorqueRef(*args)
TS_SetEventOnTorqueRef = _TML_LIB_Python.TS_SetEventOnTorqueRef

def TS_SetEventOnEncoderIndex(*args):
  return _TML_LIB_Python.TS_SetEventOnEncoderIndex(*args)
TS_SetEventOnEncoderIndex = _TML_LIB_Python.TS_SetEventOnEncoderIndex

def TS_SetEventOnLimitSwitch(*args):
  return _TML_LIB_Python.TS_SetEventOnLimitSwitch(*args)
TS_SetEventOnLimitSwitch = _TML_LIB_Python.TS_SetEventOnLimitSwitch

def TS_SetEventOnDigitalInput(*args):
  return _TML_LIB_Python.TS_SetEventOnDigitalInput(*args)
TS_SetEventOnDigitalInput = _TML_LIB_Python.TS_SetEventOnDigitalInput

def TS_SetEventOnHomeInput(*args):
  return _TML_LIB_Python.TS_SetEventOnHomeInput(*args)
TS_SetEventOnHomeInput = _TML_LIB_Python.TS_SetEventOnHomeInput

def TS_SetupInput(*args):
  return _TML_LIB_Python.TS_SetupInput(*args)
TS_SetupInput = _TML_LIB_Python.TS_SetupInput

def TS_SetupOutput(*args):
  return _TML_LIB_Python.TS_SetupOutput(*args)
TS_SetupOutput = _TML_LIB_Python.TS_SetupOutput

def TS_SetOutput(*args):
  return _TML_LIB_Python.TS_SetOutput(*args)
TS_SetOutput = _TML_LIB_Python.TS_SetOutput

def TS_SetMultipleOutputs(*args):
  return _TML_LIB_Python.TS_SetMultipleOutputs(*args)
TS_SetMultipleOutputs = _TML_LIB_Python.TS_SetMultipleOutputs

def TS_SetMultipleOutputs2(*args):
  return _TML_LIB_Python.TS_SetMultipleOutputs2(*args)
TS_SetMultipleOutputs2 = _TML_LIB_Python.TS_SetMultipleOutputs2

def TS_SendDataToHost(*args):
  return _TML_LIB_Python.TS_SendDataToHost(*args)
TS_SendDataToHost = _TML_LIB_Python.TS_SendDataToHost

def TS_DownloadSwFile(*args):
  return _TML_LIB_Python.TS_DownloadSwFile(*args)
TS_DownloadSwFile = _TML_LIB_Python.TS_DownloadSwFile

def TS_GOTO(*args):
  return _TML_LIB_Python.TS_GOTO(*args)
TS_GOTO = _TML_LIB_Python.TS_GOTO

def TS_GOTO_Label(*args):
  return _TML_LIB_Python.TS_GOTO_Label(*args)
TS_GOTO_Label = _TML_LIB_Python.TS_GOTO_Label

def TS_CALL(*args):
  return _TML_LIB_Python.TS_CALL(*args)
TS_CALL = _TML_LIB_Python.TS_CALL

def TS_CALL_Label(*args):
  return _TML_LIB_Python.TS_CALL_Label(*args)
TS_CALL_Label = _TML_LIB_Python.TS_CALL_Label

def TS_CancelableCALL(*args):
  return _TML_LIB_Python.TS_CancelableCALL(*args)
TS_CancelableCALL = _TML_LIB_Python.TS_CancelableCALL

def TS_CancelableCALL_Label(*args):
  return _TML_LIB_Python.TS_CancelableCALL_Label(*args)
TS_CancelableCALL_Label = _TML_LIB_Python.TS_CancelableCALL_Label

def TS_ABORT():
  return _TML_LIB_Python.TS_ABORT()
TS_ABORT = _TML_LIB_Python.TS_ABORT

def TS_Execute(*args):
  return _TML_LIB_Python.TS_Execute(*args)
TS_Execute = _TML_LIB_Python.TS_Execute

def TS_ExecuteScript(*args):
  return _TML_LIB_Python.TS_ExecuteScript(*args)
TS_ExecuteScript = _TML_LIB_Python.TS_ExecuteScript

def TS_GetOutputOfExecute(*args):
  return _TML_LIB_Python.TS_GetOutputOfExecute(*args)
TS_GetOutputOfExecute = _TML_LIB_Python.TS_GetOutputOfExecute

def TS_SetupLogger(*args):
  return _TML_LIB_Python.TS_SetupLogger(*args)
TS_SetupLogger = _TML_LIB_Python.TS_SetupLogger

def TS_StartLogger(*args):
  return _TML_LIB_Python.TS_StartLogger(*args)
TS_StartLogger = _TML_LIB_Python.TS_StartLogger

def TS_RegisterHandlerForUnrequestedDriveMessages(*args):
  return _TML_LIB_Python.TS_RegisterHandlerForUnrequestedDriveMessages(*args)
TS_RegisterHandlerForUnrequestedDriveMessages = _TML_LIB_Python.TS_RegisterHandlerForUnrequestedDriveMessages

def TS_CheckForUnrequestedDriveMessages():
  return _TML_LIB_Python.TS_CheckForUnrequestedDriveMessages()
TS_CheckForUnrequestedDriveMessages = _TML_LIB_Python.TS_CheckForUnrequestedDriveMessages

def TS_DriveInitialisation():
  return _TML_LIB_Python.TS_DriveInitialisation()
TS_DriveInitialisation = _TML_LIB_Python.TS_DriveInitialisation


